open System
open System.Windows.Forms
open System.Drawing

// --- Student Type Definition ---
type Student = {
    ID: int
    Name: string
    Grades: float list
    Password: string
}

// --- Statistics Type Definition ---
type Statistics = {
    AvgGrade: float
    HighestGrade: float option
    LowestGrade: float option
    PassRate: float
}

// --- User Role Definition ---
type UserRole = 
    | Admin
    | Viewer

// --- Database and Admin Password ---
let mutable studentDatabase: Student list = []
let adminPassword = "admin123"

// --- Authentication and Role Assignment ---
let mutable currentUserRole: UserRole option = None
let mutable currentStudentID: int option = None

let authenticateAdmin (inputPassword: string): bool =
    if inputPassword = adminPassword then
        currentUserRole <- Some Admin
        true
    else
        false

let authenticateStudent (id: int) (inputPassword: string): bool =
    match studentDatabase |> List.tryFind (fun s -> s.ID = id && s.Password = inputPassword) with
    | Some student -> 
        currentUserRole <- Some Viewer
        currentStudentID <- Some student.ID
        true
    | None -> false




// --- Admin-Only Operations ---
let adminAddStudent (id: int) (name: string) (grades: float list) (password: string): unit =
    if currentUserRole = Some Admin then
        studentDatabase <- { ID = id; Name = name; Grades = grades; Password = password } :: studentDatabase
        MessageBox.Show("Student added successfully") |> ignore
    else
        MessageBox.Show("Access denied: Admin privileges required") |> ignore

let adminEditStudent (id: int) (newName: string) (newGrades: float list) (newPassword: string): unit =
    if currentUserRole = Some Admin then
        studentDatabase <- studentDatabase |> List.map (fun s -> if s.ID = id then { s with Name = newName; Grades = newGrades; Password = newPassword } else s)
        MessageBox.Show("Student edited successfully") |> ignore
    else
        MessageBox.Show("Access denied: Admin privileges required") |> ignore

let adminRemoveStudent (id: int): unit =
    if currentUserRole = Some Admin then
        studentDatabase <- studentDatabase |> List.filter (fun s -> s.ID <> id)
        MessageBox.Show("Student removed successfully") |> ignore
    else
        MessageBox.Show("Access denied: Admin privileges required") |> ignore




// --- Viewer Operations ---
let viewerViewStudentData (): unit =
    if currentUserRole = Some Viewer then
        match currentStudentID with
        | Some id -> 
            match studentDatabase |> List.tryFind (fun s -> s.ID = id) with
            | Some student -> 
                let grades = String.Join(", ", student.Grades |> List.map string)
                let message = sprintf "ID: %d\nName: %s\nGrades: [%s]" student.ID student.Name grades
                MessageBox.Show(message, "Your Data") |> ignore
            | None -> MessageBox.Show("Student data not found") |> ignore
        | None -> MessageBox.Show("No student logged in") |> ignore
    else
        MessageBox.Show("Access denied: Viewer privileges required") |> ignore



// --- Statistics Calculation ---
let calculateAverage (grades: float list): float =
    if grades.Length = 0 then 0.0
    else grades |> List.average

let calculateStatistics (students: Student list): Statistics =
    let allGrades = students |> List.collect (fun s -> s.Grades)
    let avgGrade = if allGrades.Length = 0 then 0.0 else allGrades |> List.average
    let highestGrade = if allGrades.Length = 0 then None else Some(allGrades |> List.max)
    let lowestGrade = if allGrades.Length = 0 then None else Some(allGrades |> List.min)
    let passRate = 
        if allGrades.Length = 0 then 0.0
        else
            allGrades 
            |> List.filter (fun g -> g >= 50.0) 
            |> List.length 
            |> float 
            |> fun p -> (p / float allGrades.Length) * 100.0
    {
        AvgGrade = avgGrade
        HighestGrade = highestGrade
        LowestGrade = lowestGrade
        PassRate = passRate
    }




// --- Admin Form ---
type AdminForm() as this =
    inherit Form(Text = "Admin Dashboard", Size = Size(800, 600))

    // UI Components
    let addButton = new Button(Text = "Add Student", Location = Point(10, 10))
    let editButton = new Button(Text = "Edit Student", Location = Point(130, 10))
    let removeButton = new Button(Text = "Remove Student", Location = Point(250, 10))
    let viewStatsButton = new Button(Text = "View Stats", Location = Point(370, 10))
    let studentsListBox = new ListBox(Location = Point(10, 50), Size = Size(760, 500))

    do
        // Add UI components to form
        this.Controls.AddRange([| addButton; editButton; removeButton; viewStatsButton; studentsListBox |])

        // Event Handlers
        addButton.Click.Add(fun _ -> 
            let idInput = Microsoft.VisualBasic.Interaction.InputBox("Enter Student ID:", "Add Student", "")
            let name = Microsoft.VisualBasic.Interaction.InputBox("Enter Student Name:", "Add Student", "")
            let gradesInput = Microsoft.VisualBasic.Interaction.InputBox("Enter Grades (comma-separated):", "Add Student", "")
            let password = Microsoft.VisualBasic.Interaction.InputBox("Enter Student Password:", "Add Student", "")
            match Int32.TryParse(idInput), gradesInput.Split(',') |> Array.map (fun g -> Double.TryParse(g.Trim())) |> Array.toList |> List.partition fst with
            | (true, id), (parsedGrades, []) -> 
                let grades = parsedGrades |> List.map snd
                adminAddStudent id name grades password
                studentsListBox.Items.Clear()
                studentDatabase |> List.iter (fun s -> studentsListBox.Items.Add(sprintf "ID: %d, Name: %s" s.ID s.Name) |> ignore)
            | _ -> MessageBox.Show("Invalid input") |> ignore
        )

        editButton.Click.Add(fun _ -> 
            let idInput = Microsoft.VisualBasic.Interaction.InputBox("Enter Student ID:", "Edit Student", "")
            let newName = Microsoft.VisualBasic.Interaction.InputBox("Enter New Name:", "Edit Student", "")
            let newGradesInput = Microsoft.VisualBasic.Interaction.InputBox("Enter New Grades (comma-separated):", "Edit Student", "")
            let newPassword = Microsoft.VisualBasic.Interaction.InputBox("Enter New Password:", "Edit Student", "")
            match Int32.TryParse(idInput), newGradesInput.Split(',') |> Array.map (fun g -> Double.TryParse(g.Trim())) |> Array.toList |> List.partition fst with
            | (true, id), (parsedGrades, []) -> 
                let newGrades = parsedGrades |> List.map snd
                adminEditStudent id newName newGrades newPassword
                studentsListBox.Items.Clear()
                studentDatabase |> List.iter (fun s -> studentsListBox.Items.Add(sprintf "ID: %d, Name: %s" s.ID s.Name) |> ignore)
            | _ -> MessageBox.Show("Invalid input") |> ignore
        )

        removeButton.Click.Add(fun _ -> 
            let idInput = Microsoft.VisualBasic.Interaction.InputBox("Enter Student ID:", "Remove Student", "")
            match Int32.TryParse(idInput) with
            | true, id -> 
                adminRemoveStudent id
                studentsListBox.Items.Clear()
                studentDatabase |> List.iter (fun s -> studentsListBox.Items.Add(sprintf "ID: %d, Name: %s" s.ID s.Name) |> ignore)
            | _ -> MessageBox.Show("Invalid ID format") |> ignore
        )

        viewStatsButton.Click.Add(fun _ -> 
            let stats = calculateStatistics studentDatabase
            let message =
                sprintf "Average Grade: %f\n%s%sPass Rate: %f%%" 
                    stats.AvgGrade
                    (match stats.HighestGrade with | Some hg -> sprintf "Highest Grade: %f\n" hg | None -> "Highest Grade: N/A\n")
                    (match stats.LowestGrade with | Some lg -> sprintf "Lowest Grade: %f\n" lg | None -> "Lowest Grade: N/A\n")
                    stats.PassRate
            MessageBox.Show(message, "Class Statistics") |> ignore
        )


// --- Student Form ---
type StudentForm() as this =
    inherit Form(Text = "Student Dashboard", Size = Size(400, 300))

    // UI Components
    let viewDataButton = new Button(Text = "View Your Data", Location = Point(10, 10), Size = Size(200, 40))

    do
        // Add UI components to form
        this.Controls.Add(viewDataButton)

        // Event Handlers
        viewDataButton.Click.Add(fun _ -> viewerViewStudentData())



